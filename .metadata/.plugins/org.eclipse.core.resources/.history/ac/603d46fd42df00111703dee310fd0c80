import java.util.ArrayList;
import java.util.List;


public class Program1 {

	/**
	 * @param args
	 */
	
	static String[][] tMatrix = {	{"x","A","B","x"},
			{"x","x","C","D"},
			{"x","C","x","E"},
			{"x","x","x","x"}
	};
	
	static int level;
	public static void main(String[] args) {
		List<String> input= new ArrayList<String>();
		input.clear();
		input.add("a");
		input.add("b");
		input.add("c");
		input.add("d");
		input.add("e");
		List<Double> prob= new ArrayList<Double>();
		prob.clear();
		prob.add(0.5);
		prob.add(0.5);
		prob.add(0.5);
		prob.add(0.5);
		prob.add(0.5);
		NewCombi(input,prob,"",1.0,"");
	}
	
	private static String[][] Copy2dArray(String[][] tMatrix) {
		// TODO Auto-generated method stub
		String[][] newArray = new String[tMatrix.length][tMatrix.length];
		for (int i = 0; i < newArray.length; i++) {
			for (int j = 0; j < newArray.length; j++) {
				newArray[i][j]= tMatrix[i][j];
			}
		}
		return newArray;
	}
	
	private static String[][] RemoveinTMatrix(String[][] clone,
			String pathsToRemove) {
		String[] edges = pathsToRemove.split(":");
		
		for (int i = 0; i < clone.length; i++) {
			for (int j = 0; j < clone.length; j++) {
				for (int j2 = 0; j2 < edges.length; j2++) {
					if(clone[i][j].equals(edges[j2]))
						clone[i][j]="x";
				}
			}
		}
		return clone;
	}
	
	private static void NewCombi(List<String> input,List<Double> prob, String stackTrace, double reliability,String negPaths)
	{
	
		if(input.size()==0){
			//checkpath();
			System.out.println(stackTrace +"=>"+reliability + " - "+negPaths);
			
			String[][] newMatrix = RemoveinTMatrix(Copy2dArray(tMatrix),negPaths);
			
			boolean Exists = PathExists(newMatrix,"1","4","",Vertices,false);
			return;
		}
		 
		String leftString = input.remove(0);
		String rightString = "-" + leftString;
		
		double leftProb = prob.remove(0);
		double rightProb = 1 - leftProb ;
		
		
		//Left Tree
		NewCombi(input, prob, stackTrace + leftString, reliability * leftProb, negPaths );
		
		//right Tree
		NewCombi(input, prob, stackTrace + rightString, reliability * rightProb,negPaths + rightString );
		
		input.add(0, leftString);
		prob.add(0,leftProb);
		
	}
	
}
