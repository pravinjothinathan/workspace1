import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Model {

	public double[] getNBPriors(Map<Integer, FilewithClassInfo> totFiles) {
		// TODO Auto-generated method stub
		double[] priors = new double[2];
		
		for(int j=0;j<2;j++)
		{
			int counter =0;
			
			for(int i=0;i<totFiles.size();i++)
			{
				if(totFiles.get(i).ClassInfo==j)
					counter++;
			}
			
			priors[j] = (double)counter/totFiles.size();
			System.out.println("priors - j"+j+"-"+priors[j]);
		}
		return priors;
	}

	public Map<Integer,Map<String,Double>> getConditionalProb(
			Map<Integer, FilewithClassInfo> totFiles, List<String> vocab) {
		// TODO Auto-generated method stub
		int counter =0;
		Map<Integer,Map<String,Double>> CondProb = new HashMap<Integer, Map<String,Double>>();
		for(int j=0;j<2;j++)
		{
			Map <String,Integer> map = new HashMap<String, Integer>();
			int count =0;
			counter =0;
			
			
			for(int i=0;i<totFiles.size();i++)
			{
				if(totFiles.get(i).ClassInfo==j)
				{
					counter++;
					Map<String,Integer> temp = totFiles.get(i).WordMap;
					
					for (String word : temp.keySet()) {
						if(map.containsKey(word)) 
						{
							int n = map.get(word);
							int currn = temp.get(word);
							count = count + currn;
							map.remove(word);
							map.put(word, n+currn);
						}
						else
						{
							count = count+temp.get(word);
							map.put(word, temp.get(word));
						}
					}
				}
			}
			
			System.out.println("counter :"+counter);
			Map<String,Double> probTable = new HashMap<String, Double>();
			int c=0;
			for (String token : vocab) 
			{
				if(map.containsKey(token))
					probTable.put(token, (double)(map.get(token)+1)/(count+vocab.size()));
				else
					probTable.put(token, (double)(1)/(count+vocab.size()));
			}
			
			CondProb.put(j, probTable);
			System.out.println("count per classs :"+map.size()+" count :"+count+" j val"+j+" c val"+c);
		}
		return CondProb;
	}

	public void TestNBModel(Map<Integer, FilewithClassInfo> filesToTest,
			double[] priors, Map<Integer, Map<String, Double>> condProb) {
		// TODO Auto-generated method stub
		int percentageAccuracyCounter = 0;
		int percentageErrorCounter = 0;
		Helper h = new Helper();
		
		for(int  i=0;i<filesToTest.size();i++)
		{
			List<Double> vals = new ArrayList<Double>();
			for(int j=0;j<2;j++)
			{
				Map<String,Double> probMap = condProb.get(j);
				double prob = Math.log10(priors[j]);
				
				for (String token : filesToTest.get(i).WordMap.keySet()) {
					if(probMap.containsKey(token))
						prob += Math.log10(probMap.get(token));
				}
				
				vals.add(prob);
			}
			
			if(filesToTest.get(i).ClassInfo == h.getMaxValIndex(vals))
				percentageAccuracyCounter++;
			else
				percentageErrorCounter++;
				
		}
		
		System.out.println("percentageAccuracyCounter"+percentageAccuracyCounter+"percentageErrorCounter"+percentageErrorCounter);
		System.out.println("Percentage : "+ (double)(percentageAccuracyCounter*100)/filesToTest.size());
	}

	public double[] LinerRegressionMCAP(int[][] filetoWordcountMatrix,
			int[] fileClassInfo, double eta, double lambda) {
		// TODO Auto-generated method stub
		return null;
	}

}
